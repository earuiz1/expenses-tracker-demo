{"version":3,"sources":["components/Expenses/ExpensesFilter.js","components/UI/Card.js","components/Expenses/ExpenseDate.js","components/Expenses/ExpenseItem.js","components/Expenses/ExpensesList.js","components/Chart/ChartBar.js","components/Chart/Chart.js","components/Expenses/ExpensesChart.js","components/Expenses/Expenses.js","components/NewExpense/ExpenseForm.js","components/NewExpense/NewExpense.js","App.js","index.js"],"names":["ExpensesFilter","props","className","value","defaultYear","onChange","event","onAddChangeFilter","target","Card","classes","children","ExpenseDate","month","date","toLocaleString","day","year","ExpenseItem","title","amount","ExpensesList","items","length","map","x","id","ChartBar","barFillHeight","maxValue","Math","round","style","height","label","Chart","dataPointsValues","dataPoints","totalMax","max","ExpensesChart","chartDataPoints","expenses","expense","getMonth","Expenses","useState","enteredYear","setEnteredYear","filteredExpenses","expensesList","filter","getFullYear","toString","selectedYear","console","log","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","onSubmit","preventDefault","expenseData","Date","onSaveExpenseData","type","min","step","onClick","onCancel","NewExpense","isEditing","setEditing","enteredExpenseData","random","onAddExpense","DUMMY_DATA","App","setExpenses","prevExpenses","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ad6e1d0b.chunk.js","sourcesContent":["import React from 'react'\n\nimport './ExpensesFilter.css';\n\nconst ExpensesFilter = (props) => {\n\n    //Create a function to pass the filter value from a child component to a parent\n    const FilterChangeHandler = (event) => {\n\n      //console.log(event.target.value);\n      props.onAddChangeFilter(event.target.value);\n    }\n\n  return (\n    <div className='expenses-filter'>\n      <div className='expenses-filter__control'>\n        <label>Filter by year</label>\n        {/* Use the onChange property to listen to changes in the filter */}\n        {/* Use two way binding to reset the filter year once you reload the page */}\n        <select value={props.defaultYear} onChange ={FilterChangeHandler}>\n          <option value='2022' >2022</option>\n          <option value='2021' >2021</option>\n          <option value='2020' >2020</option>\n          <option value='2019' >2019</option>\n        </select>\n      </div>\n    </div>\n  );\n};\n\nexport default ExpensesFilter;","import React from 'react'\nimport './Card.css';\n\nconst Card = (props) => {\n\n    const classes = 'card ' + props.className;\n\n    return (\n        <div className={classes}>{props.children}</div>\n    )\n}\n\nexport default Card;\n","import React from 'react'\nimport './ExpenseDate.css';\n\nconst ExpenseDate = (props) => {\n\n    const month = props.date.toLocaleString('en-US', {month: 'long'});\n    const day = props.date.toLocaleString('en-US', {day: 'numeric'});\n    const year = props.date.toLocaleString('en-US', {year: 'numeric'});\n\n    return (\n        <div className = \"expense-date\">\n                <div>{month}</div>\n                <div>{day}</div>\n                <div>{year}</div>\n        </div>\n    )\n}\n\nexport default ExpenseDate;\n","import React from 'react'\nimport ExpenseDate from './ExpenseDate'\nimport Card from '../UI/Card'\n\nimport './ExpenseItem.css';\n\n\nconst ExpenseItem = (props) => {\n    \n    // //Syntax for \"useSate() function\"\n    // const [title, setTitle ] = useState(props.title);\n\n    // const clickHandler = () => {\n    //     //Call setTitle with the new updated name\n    //     setTitle('Updated!')\n    //     console.log(title);\n    // }\n\n    return (\n        <li>\n            <Card className = \"expense-item\">\n                    <ExpenseDate date = {props.date}/>\n                    <div className = \"expense-item__description\">\n                            <h2 className=\"expense-item h2 \">{props.title} </h2>\n                            <div className = \"expense-item__price\">${props.amount}</div>\n                            {/* Use the onClick property that points to a function that changes the title \n                            <button className=\"buttons\" onClick={clickHandler}>Change title </button> */}\n                    </div>        \n            </Card>\n        </li>\n         \n    )\n}\n\nexport default ExpenseItem;","import React from 'react'\nimport ExpenseItem from './ExpenseItem';\n\nimport './ExpensesList.css'\n\n\n//This component basically is in charge of the condition logic\n\nconst ExpensesList = (props) => {\n\n    //If there are no items with the year selected, create an h2 element with a specific message\n    if(props.items.length === 0){\n        return <h2 className=\"expenses-list__fallback\">No expenses found.</h2>\n    }\n\n    return (\n        <ul className=\"expenses-list\">\n        {\n            props.items.map((x) => (\n            <ExpenseItem \n                key={x.id} \n                title={x.title} \n                amount={x.amount} \n                date={x.date}\n             />\n            ))\n        }\n        </ul>\n    )\n}\n\nexport default ExpensesList\n","import React from 'react'\n\nimport './ChartBar.css'\n\nconst ChartBar = (props) => {\n\n    //This variable will be assigned as a css style\n    let barFillHeight = \"0%\";\n\n    //If max value is grater than 0\n    if(props.maxValue > 0){\n        //If so, obtain the percentage between 0 and 100 by which this bar will be filled and convert it to a string\n        barFillHeight = Math.round((props.value / props.maxValue) * 100) + '%';\n    }\n    return (\n        <div className=\"chart-bar\">\n            <div className=\"chart-bar__inner\">\n                {/* Set the style height css dynamically */}\n                <div className=\"chart-bar__fill\" style={{height: barFillHeight}}></div>\n            </div>\n            {/* Output label  */}\n            <div className=\"chart-bar__label\">{props.label}</div>      \n        </div>\n    )\n}\n\nexport default ChartBar\n","import React from 'react'\nimport ChartBar from './ChartBar';\n\nimport './Chart.css'\n\nconst Chart = (props) => {\n\n    //Transform an array of objects to an array of numbers so we can work around the max fucntion built in Js\n    const dataPointsValues = props.dataPoints.map(x => x.value);\n\n    //Find the maximum value of each month and use the spread operator \"...\" since we whave an array of numbers \n    const totalMax = Math.max(...dataPointsValues);\n\n    return (\n        <div className=\"chart\">\n            {/* Output the chartbars dynamically by going thorugh an array of data points and mapping every data point to a chart bar */}\n            {props.dataPoints.map(x => <ChartBar key={x.label} value = {x.value} maxValue ={totalMax} label={x.label}/>)}  \n        </div>\n    )\n}\n\nexport default Chart\n","import React from 'react'\nimport Chart from \"../Chart/Chart\";\n\nconst ExpensesChart = (props) => {\n\n    //Create an object with label and value key \n    const chartDataPoints =[\n        {label: 'Jan', value: 0},\n        {label: 'Feb', value: 0},\n        {label: 'Mar', value: 0},\n        {label: 'Apr', value: 0},\n        {label: 'May', value: 0},\n        {label: 'Jun', value: 0},\n        {label: 'Jul', value: 0},\n        {label: 'Aug', value: 0},\n        {label: 'Sep', value: 0},\n        {label: 'Oct', value: 0},\n        {label: 'Nov', value: 0},\n        {label: 'Dec', value: 0},\n\n    ];\n\n    //Create a for loop tha loop trhorugh all expenses that we get via props\n    for (const expense of props.expenses) {\n        //Get the month, starting from 0 where Januanry is 0\n        const expenseMonth = expense.date.getMonth();\n        //Update the value of the selected datapoint by adding the expense amount\n        chartDataPoints[expenseMonth].value += expense.amount;      \n    }\n    return (\n        <div>\n            <Chart dataPoints = {chartDataPoints} />      \n        </div>\n    )\n}\n\nexport default ExpensesChart\n","import React, {useState} from 'react'\nimport ExpensesFilter from './ExpensesFilter'\nimport Card from '../UI/Card'\nimport ExpensesList from './ExpensesList'\nimport ExpensesChart from './ExpensesChart'\n\nimport './Expenses.css';\n\nconst Expenses = (props) => {\n\n\n    //Create the state \n    const [enteredYear, setEnteredYear] = useState('2020');\n    \n    //Create a function to pass down data from a child component to a parent\n    const ExpenseFilterHandler = (selectedYear) => {\n\n        console.log('In Expenses.js');\n        console.log(selectedYear);\n\n        //Assign the value to the actual state\n        setEnteredYear(selectedYear);\n     \n    }\n    \n    //Create a new const with all expensesList and filter values based on some condition\n    const filteredExpenses = props.expensesList.filter(x => {\n        return x.date.getFullYear().toString() === enteredYear;\n    });\n\n    return (\n        <div>\n            <Card className=\"expenses\">\n\n            {/* Create a pointer that points to the ExpenseFilterHandler function */}\n            {/* One thing to take into consideration is that the default year never changes once you filter a year, what you can do is pass another props and use two way binding  */}\n            <ExpensesFilter defaultYear={enteredYear} onAddChangeFilter = {ExpenseFilterHandler}/>\n\n            {/* To remove the hardcode code below and do things dynamically, create an array full of jsx items using the .map() method in javascript */}\n            {/* Add a special property called \"key\" to help react identify individual items using unique ids to remove warning and avoid future bugs*/}\n            {/* Implement logic operation to show a message if a filter year does not have any item available  */}\n\n            {/* {filteredExpenses.length  === 0 && <p> No expenses found. </p>}\n            {filteredExpenses.length > 0 &&\n                filteredExpenses.map((x) => (\n                    <ExpenseItem \n                        key={x.id} \n                        title={x.title} \n                        amount={x.amount} \n                        date={x.date}\n                     />\n                ))} */}\n            <ExpensesChart expenses={filteredExpenses}/>\n            <ExpensesList items = {filteredExpenses}/>\n            </Card>\n        </div>\n    )\n}\n\nexport default Expenses;\n","import React, {useState} from 'react'\n\nimport \"./ExpenseForm.css\"\n\nconst ExpenseForm = (props) => {\n\n    //Setting the state for the title, amount and date\n    const [enteredTitle , setEnteredTitle ] = useState('');\n    const [enteredAmount , setEnteredAmount ] = useState('');\n    const [enteredDate , setEnteredDate ] = useState('');\n\n    //Creating event handler to set the title, amount and date\n    const titleChangeHandler = (event) => {\n        setEnteredTitle(event.target.value);\n    }\n\n    const amountChangeHandler = (event) => {\n        setEnteredAmount(event.target.value);\n    }\n\n    const dateChangeHandler = (event) => {\n        setEnteredDate(event.target.value);\n    }\n    const submitHandler = (event) => {\n        //Prevents the page from reloading \n        event.preventDefault();\n\n        //Object to store all data \n        const expenseData={\n            title: enteredTitle,\n            amount: +enteredAmount,\n            date: new Date(enteredDate),\n\n        };\n\n        //Log the data to see if it works\n        //console.log(expenseData);\n\n        //Now, actually call the function you declared in NewExpense.js and pass the of the form (expenseData)\n        props.onSaveExpenseData(expenseData);\n\n        //Reset the values after the data is submmited to clear the input (Two-way binding)\n        setEnteredTitle('');\n        setEnteredAmount('');\n        setEnteredDate('');\n\n    }\n\n    return (\n        <div>\n        {/* //Use the onSubmit property to listen to changes in the form  */}\n        <form onSubmit ={submitHandler}>\n            <div className='new-expense__controls'>\n                <div className='new-expense__control'>\n                    <label>Title</label>\n                    <input type='text' value={enteredTitle} onChange={titleChangeHandler}/>\n                </div>\n                <div className='new-expense__control'>\n                    <label>Amount</label>\n                    <input type='number' min='0.01' step='0.01' value={enteredAmount} onChange={amountChangeHandler}/>\n                </div>\n                <div className='new-expense__control'>\n                    <label>Date</label>\n                    <input type='date' min='2019-01-01' max='2022-12-31' value={enteredDate} onChange={dateChangeHandler}/>\n                </div>\n                </div>\n                <div className='new-expense__actions'>\n                <button type=\"button\" onClick={props.onCancel}>Cancel</button>\n                <button type='submit'>Add Expense</button>\n            </div>\n      </form> \n      </div>     \n    )\n}\n\nexport default ExpenseForm\n","import React, {useState} from 'react'\nimport ExpenseForm from \"./ExpenseForm\";\nimport \"./NewExpense.css\"\n\nconst NewExpense = (props) => {\n\n    //Create a new state to add and save new expense \n    const [isEditing, setEditing] = useState(false);\n\n     //Create a function to pass down data from a child component to a parent\n    const saveExpenseDataHandler = (enteredExpenseData) => {\n     \n        //Create an object\n        const expenseData ={\n            ...enteredExpenseData,\n            id: Math.random().toString()\n        };\n\n        //Now, actually call the function you declared in App.js and pass the values of the form (expenseData)\n        props.onAddExpense(expenseData);\n\n        //Show the \"Add new Expense\" button after the new expense has been added.\n        setEditing(false);\n    };\n\n    //Create a function to know If button was click set const to true and show the actual form\n    const startEditingHandler = () => {\n        console.log(\"Button was clicked\");\n        setEditing(true);\n     \n    }\n\n    //Create a function to know If button was click set const to false and show only the button \n    const stopEditingHandler = () => {\n        setEditing(false);\n     \n    }\n\n    return (\n        <div className=\"new-expense\">\n            {!isEditing && <button onClick={startEditingHandler}>Add New Expense</button>}\n             {/* Create a pointer that points to the saveExpenseDataHandler function */}\n            {isEditing && <ExpenseForm onSaveExpenseData = {saveExpenseDataHandler} onCancel={stopEditingHandler}/>}\n        </div>\n    )\n}\n\nexport default NewExpense\n","\nimport React, {useState} from 'react';\nimport Expenses from \"./components/Expenses/Expenses\";\nimport NewExpense from \"./components/NewExpense/NewExpense\";\n\n //Array with dummy data\n const DUMMY_DATA = [\n  {\n    id: 'e1',\n    title: 'Toilet Paper',\n    amount: 94.12,\n    date: new Date(2020, 7, 14),\n  },\n  { id: 'e2', title: 'New TV', amount: 799.49, date: new Date(2021, 2, 12) },\n  {\n    id: 'e3',\n    title: 'Car Insurance',\n    amount: 294.67,\n    date: new Date(2021, 2, 28),\n  },\n  {\n    id: 'e4',\n    title: 'New Desk (Wooden)',\n    amount: 450,\n    date: new Date(2021, 5, 12),\n  },\n];\n\nfunction App() {\n\n  //Create the state\n  const [expenses,setExpenses] = useState(DUMMY_DATA);\n  \n  //Create a function to pass down data from a child component to a parent\n  const addExpenseHandler = (expense) => {\n    console.log('In App.js');\n    console.log(expense);\n\n    //Call setExpenses to set expenses array to a new array which include the new expense\n    //A clean way to update a state when is based on an older snapshot of that state\n    setExpenses(prevExpenses => {\n      return[expense, ...prevExpenses]\n    });\n   \n  };\n\n\n  return (\n    <div>\n       {/* Follow the same parent to communicate to a parent */}\n       {/* Create a pointer that points to the addExpenseHandler function */}\n      <NewExpense onAddExpense={addExpenseHandler}/>\n      <Expenses expensesList = {expenses}/>\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}