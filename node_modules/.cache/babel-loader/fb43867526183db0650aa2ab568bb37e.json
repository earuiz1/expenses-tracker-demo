{"ast":null,"code":"import _objectSpread from\"/Users/earuiz1/Desktop/React_Guide/expenses-tracker-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/earuiz1/Desktop/React_Guide/expenses-tracker-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import ExpenseForm from\"./ExpenseForm\";import\"./NewExpense.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var NewExpense=function NewExpense(props){//Create a new state to add and save new expense \nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),isEditing=_useState2[0],setEditing=_useState2[1];//Create a function to pass down data from a child component to a parent\nvar saveExpenseDataHandler=function saveExpenseDataHandler(enteredExpenseData){//Create an object\nvar expenseData=_objectSpread(_objectSpread({},enteredExpenseData),{},{id:Math.random().toString()});//Now, actually call the function you declared in App.js and pass the values of the form (expenseData)\nprops.onAddExpense(expenseData);//Show the \"Add new Expense\" button after the new expense has been added.\nsetEditing(false);};//Create a function to know If button was click set const to true and show the actual form\nvar startEditingHandler=function startEditingHandler(){console.log(\"Button was clicked\");setEditing(true);};//Create a function to know If button was click set const to false and show only the button \nvar stopEditingHandler=function stopEditingHandler(){setEditing(false);};return/*#__PURE__*/_jsxs(\"div\",{className:\"new-expense\",children:[!isEditing&&/*#__PURE__*/_jsx(\"button\",{onClick:startEditingHandler,children:\"Add New Expense\"}),isEditing&&/*#__PURE__*/_jsx(ExpenseForm,{onSaveExpenseData:saveExpenseDataHandler,onCancel:stopEditingHandler})]});};export default NewExpense;","map":{"version":3,"sources":["/Users/earuiz1/Desktop/React_Guide/expenses-tracker-demo/src/components/NewExpense/NewExpense.js"],"names":["React","useState","ExpenseForm","NewExpense","props","isEditing","setEditing","saveExpenseDataHandler","enteredExpenseData","expenseData","id","Math","random","toString","onAddExpense","startEditingHandler","console","log","stopEditingHandler"],"mappings":"6VAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,KAA8B,OAA9B,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CACA,MAAO,kBAAP,C,wFAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAW,CAE1B;AACA,cAAgCH,QAAQ,CAAC,KAAD,CAAxC,wCAAOI,SAAP,eAAkBC,UAAlB,eAEC;AACD,GAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAACC,kBAAD,CAAwB,CAEnD;AACA,GAAMC,CAAAA,WAAW,gCACVD,kBADU,MAEbE,EAAE,CAAEC,IAAI,CAACC,MAAL,GAAcC,QAAd,EAFS,EAAjB,CAKA;AACAT,KAAK,CAACU,YAAN,CAAmBL,WAAnB,EAEA;AACAH,UAAU,CAAC,KAAD,CAAV,CACH,CAbD,CAeA;AACA,GAAMS,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CAC9BC,OAAO,CAACC,GAAR,CAAY,oBAAZ,EACAX,UAAU,CAAC,IAAD,CAAV,CAEH,CAJD,CAMA;AACA,GAAMY,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAAM,CAC7BZ,UAAU,CAAC,KAAD,CAAV,CAEH,CAHD,CAKA,mBACI,aAAK,SAAS,CAAC,aAAf,WACK,CAACD,SAAD,eAAc,eAAQ,OAAO,CAAEU,mBAAjB,6BADnB,CAGKV,SAAS,eAAI,KAAC,WAAD,EAAa,iBAAiB,CAAIE,sBAAlC,CAA0D,QAAQ,CAAEW,kBAApE,EAHlB,GADJ,CAOH,CAzCD,CA2CA,cAAef,CAAAA,UAAf","sourcesContent":["import React, {useState} from 'react'\nimport ExpenseForm from \"./ExpenseForm\";\nimport \"./NewExpense.css\"\n\nconst NewExpense = (props) => {\n\n    //Create a new state to add and save new expense \n    const [isEditing, setEditing] = useState(false);\n\n     //Create a function to pass down data from a child component to a parent\n    const saveExpenseDataHandler = (enteredExpenseData) => {\n     \n        //Create an object\n        const expenseData ={\n            ...enteredExpenseData,\n            id: Math.random().toString()\n        };\n\n        //Now, actually call the function you declared in App.js and pass the values of the form (expenseData)\n        props.onAddExpense(expenseData);\n\n        //Show the \"Add new Expense\" button after the new expense has been added.\n        setEditing(false);\n    };\n\n    //Create a function to know If button was click set const to true and show the actual form\n    const startEditingHandler = () => {\n        console.log(\"Button was clicked\");\n        setEditing(true);\n     \n    }\n\n    //Create a function to know If button was click set const to false and show only the button \n    const stopEditingHandler = () => {\n        setEditing(false);\n     \n    }\n\n    return (\n        <div className=\"new-expense\">\n            {!isEditing && <button onClick={startEditingHandler}>Add New Expense</button>}\n             {/* Create a pointer that points to the saveExpenseDataHandler function */}\n            {isEditing && <ExpenseForm onSaveExpenseData = {saveExpenseDataHandler} onCancel={stopEditingHandler}/>}\n        </div>\n    )\n}\n\nexport default NewExpense\n"]},"metadata":{},"sourceType":"module"}